# Cheat sheet with commands and queries for project demo

# Start the local DynamoDB instance
docker-compose up

# Create a table in DynamoDB
aws dynamodb create-table \
    --table-name SwimmersAndSessions \
    --attribute-definitions \
        AttributeName=PK,AttributeType=S \
        AttributeName=SK,AttributeType=S \
    --key-schema \
        AttributeName=PK,KeyType=HASH \
        AttributeName=SK,KeyType=RANGE \
    --provisioned-throughput \
        ReadCapacityUnits=5,WriteCapacityUnits=5 \
    --table-class STANDARD \
	--endpoint-url http://localhost:8000

# Add a swimmer to the database
curl localhost:3000/swimmers/add -d '{"name": "Lars Magelssen", "age": 35}' -H "Content-Type: application/json"

# Add a session to the database
curl -X POST http://localhost:3000/sessions/add \
-H "Content-Type: application/json" \
-d '{
  "swimmer_id": "",
  "date": "2025.01.19",
  "distance": 1000,
  "duration": 30,
  "intensity": "moderate",
  "style": "freestyle",
  "notes": "Morning swim"
}'

# Get swimmer by ID
curl "localhost:3000/swimmers/find?id="

# Find all swimmers
curl localhost:3000/swimmers

# List all items from database
aws dynamodb scan --table-name SwimmersAndSessions --endpoint-url http://localhost:8000

# Send an event to the lambda function
sam local invoke aws_lambda_function.my_lambda -e event.json --docker-network dynamodb-local
sam local invoke aws_lambda_function.create_swimmer -e event.json --docker-network dynamodb-local
sam local invoke aws_lambda_function.list_swimmers --docker-network dynamodb-local
sam local invoke aws_lambda_function.update_swimmer -e update_event.json --docker-network dynamodb-local
